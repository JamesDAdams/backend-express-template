generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String   @db.VarChar(64)
  avatar    String   @db.VarChar(200) @default("")
  email     String   @unique @db.VarChar(100)
  emailVerified Boolean  @default(false)
  password  String
  status    UserStatus @default(OFFLINE)
  level     Int     @default(0)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isActive  Boolean  @default(true)

  userRoles UserRole[]
  friendsRequested Friendship[] @relation("requester")
  friendsReceived  Friendship[] @relation("receiver")
  userKanas UserKana[]
  quizzes Quiz[]
  characterProgress UserCharacterProgress[]
  characterListSubscriptions UserCharacterListSubscription[]
  createdCharacterLists CharacterList[]

  @@map("users")
}

// Role model
model Role {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(50)
  description String

  userRoles   UserRole[]

  @@map("roles")
}

// Pivot table for many-to-many relation
model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
  userId Int
  roleId Int

  @@id([userId, roleId])
  @@map("user_roles")
}

// Friendship model
model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int
  receiverId  Int
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester   User     @relation("requester", fields: [requesterId], references: [id])
  receiver    User     @relation("receiver", fields: [receiverId], references: [id])

  @@unique([requesterId, receiverId])
  @@map("friendships")
}

// Kana model
model Kana {
  id        Int       @id @default(autoincrement())
  character String    @unique
  type      KanaType

  userKanas UserKana[]

  @@map("kanas")
}

// Pivot table for User-Kana relation
model UserKana {
  user      User     @relation(fields: [userId], references: [id])
  kana      Kana     @relation(fields: [kanaId], references: [id])
  userId    Int
  kanaId    Int
  isLearned Boolean  @default(false)
  updatedAt DateTime @updatedAt

  @@id([userId, kanaId])
  @@map("user_kanas")
}

// Quiz model
model Quiz {
	id					Int				@id @default(autoincrement())
	datetime		DateTime	@default(now())
	type				QuizType
	onlyKnowKana		Boolean		@default(false)
	onlyUnknowKana	Boolean		@default(false)
	random			Boolean		@default(true)
	numberOfQuestion	Int
	answerFormat	AnswerFormat
	duration		Int			// Duration in seconds
	score			Int

	// Add relation to User
	userId			Int
	user			User		@relation(fields: [userId], references: [id])

	@@map("quizzes")
}

// Character List model
model CharacterList {
	id				Int				@id @default(autoincrement())
	name			String		@db.VarChar(100)
	status		CharacterListStatus	@default(PUBLIC)
	createdAt	DateTime	@default(now())

	creatorId		Int?
	creator			User?			@relation(fields: [creatorId], references: [id])

	characters		Character[]
	userSubscriptions UserCharacterListSubscription[]

	@@map("character_lists")
}

// Character model
model Character {
	id								Int				@id @default(autoincrement())
	char							String		@db.VarChar(100)
	romaji						String		@db.VarChar(50)
	groupe						Int?
	svg_id						Int[]
	alternative_characters	String?		@db.VarChar(100)
	tenten						Boolean?
	maru							Boolean?
	dakuon						Boolean?
	translate					String[]	@default([])
	kana							String?		@db.VarChar(100)

	// Relation to CharacterList
	characterListId		Int
	characterList			CharacterList	@relation(fields: [characterListId], references: [id])

	userCharacterProgress UserCharacterProgress[]

	@@map("characters")
}

// Pivot table for User-Character progress
model UserCharacterProgress {
	user			User			@relation(fields: [userId], references: [id])
	character	Character	@relation(fields: [characterId], references: [id])
	userId		Int
	characterId Int
	isKnown		Boolean		@default(false)
	updatedAt	DateTime	@updatedAt

	@@id([userId, characterId])
	@@map("user_character_progress")
}

// Pivot table for User-CharacterList subscription
model UserCharacterListSubscription {
	user					User					@relation(fields: [userId], references: [id])
	characterList	CharacterList	@relation(fields: [characterListId], references: [id])
	userId				Int
	characterListId	Int
	subscribedAt	DateTime			@default(now())
	isActive			Boolean				@default(true)

	@@id([userId, characterListId])
	@@map("user_character_list_subscriptions")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserStatus {
  ONLINE
  OFFLINE
  STUDYING
  QUIZ
}

enum KanaType {
  HIRAGANA
  KATAKANA
}

enum QuizType {
	HIRAGANA
	KATAKANA
  KANJI
  VOCABULARY
  LISTENING
}

enum AnswerFormat {
	ROMAJI
	KANA
	WRITING
  SPEAKING
}

enum CharacterListStatus {
	PRIVATE
	PUBLIC
	FRIENDS_ONLY
}