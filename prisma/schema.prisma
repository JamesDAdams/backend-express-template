generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String   @db.VarChar(64)
  avatar    String   @db.VarChar(200) @default("")
  email     String   @unique @db.VarChar(100)
  emailVerified Boolean  @default(false)
  password  String
  status    UserStatus @default(OFFLINE)
  level     Int     @default(0)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  isActive  Boolean  @default(true)

  userRoles UserRole[]
  friendsRequested Friendship[] @relation("requester")
  friendsReceived  Friendship[] @relation("receiver")

  @@map("users")
}

// Role model
model Role {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(50)
  description String

  userRoles   UserRole[]

  @@map("roles")
}

// Pivot table for many-to-many relation
model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
  userId Int
  roleId Int

  @@id([userId, roleId])
  @@map("user_roles")
}

// Friendship model
model Friendship {
  id          Int      @id @default(autoincrement())
  requesterId Int
  receiverId  Int
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  requester   User     @relation("requester", fields: [requesterId], references: [id])
  receiver    User     @relation("receiver", fields: [receiverId], references: [id])

  @@unique([requesterId, receiverId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserStatus {
  ONLINE
  OFFLINE
  STUDYING
  QUIZ
}
